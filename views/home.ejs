<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, intial-scale=1.0">
  <link rel="stylesheet" href="/styles.css">
  <title>Characters</title>

  <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
</head>
<body>
  <h1>Lord of the Rings Characters</h1>
  <div id="app"></div>

  <script>
    const characters = JSON.parse(`<%- characters %>`);

    function CharacterList({ characters, onSelect }) {
      return React.createElement(
        "ul",
        null,
        characters.map(character =>
          React.createElement(
            "li",
            { key: character._id, onClick: () => onSelect(character) }, 
            character.name
          )
        )
      );
    }

    function Detail({ character, onClear, onEdit }) {
      if(!character) return React.createElement("p", null, "Select a character to view details");

      return React.createElement("div", null,
          React.createElement("h2", null, character.name),
          React.createElement("form", { onSubmit: (e) => e.preventDefault() }, 
            React.createElement("label", null, "Name:", 
              React.createElement("input", { type: "text", value: character.name, onChange: (e) => onEdit("name", e.target.value) })
            ),
            React.createElement("label", null, "Race:", 
              React.createElement("input", { type: "text", value: character.race, onChange: (e) => onEdit("race", e.target.value) })
            ),
            React.createElement("label", null, "Weapon:", 
              React.createElement("input", { type: "text", value: character.weapon, onChange: (e) => onEdit("weapon", e.target.value) })
            ),
            React.createElement("label", null, "Age:", 
              React.createElement("input", { type: "text", value: character.age, onChange: (e) => onEdit("age", e.target.value) })
            ),
            React.createElement("button", { type: "button", onClick: onClear }, "Clear")
          )
        );
      }

    function App() {
      const [selectedCharacter, setSelectedCharacter] = React.useState(null);

      const handleSelectCharacter = (character) => {
        setSelectedCharacter({ ...character });
      };

      const handleClear = () => {
        setSelectedCharacter(null);
      };

      const handleEdit = (field, value) => {
        setSelectedCharacter(prev => ({ ...prev, [field]: value}));
      };

      return React.createElement("div", null,
        React.createElement(CharacterList, { characters: characters, onSelect: handleSelectCharacter }),
        React.createElement(Detail, { character: selectedCharacter, onClear: handleClear, onEdit: handleEdit })
      );
    }
    ReactDOM.render(React.createElement(App), document.getElementById("app"));
  </script>
</body>
</html>